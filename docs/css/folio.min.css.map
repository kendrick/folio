{"version":3,"sources":["<no source>","folio.scss","../../node_modules/rocketbelt/dist/tools/functions/font/_font-weight.scss","../../node_modules/rocketbelt/dist/tools/vendor/modular-scale/modular-scale/_calc.scss","../../node_modules/rocketbelt/dist/tools/variables/_color.scss","../../node_modules/rocketbelt/dist/tools/mixins/_z-depth.scss","../../node_modules/rocketbelt/dist/tools/vendor/_include-media.scss"],"names":[],"mappings":"AAAA,WAAA,sBAAA,kBAAA,gBAAA,mNAAA,CAAA,WAAA,sBAAA,kBAAA,gBAAA,mNAAA,CAAA,WAAA,sBAAA,kBAAA,gBAAA,mNAAA,CAAA,ACIA,KACE,uFAH+J,CAIhK,AAED,YACE,gBAAgB,AAChB,qBAAwB,CACzB,AAED,GACE,gBCUa,ADTb,mBEPqC,CFQtC,AAED,aACE,YGiC0G,CHhC3G,AAED,qEAIE,cG0B0G,AHzB1G,oBAAqB,CACtB,AAED,gDAGE,cGmB0G,AHlB1G,qBAAqB,AACrB,eCLe,CDMhB,AAED,sBACE,mBGa0G,AHZ1G,aGY0G,CHP3G,AAPD,2BAKI,SAAU,CACX,AAGH,mBACE,yFAAkH,AAClH,0BAA0B,AAC1B,aGE0G,CHD3G,AAED,SACE,aAAa,AACb,aAAa,AACb,gBAAgB,AAChB,kBAAmB,CAWpB,AAfD,oBAOI,SAAS,AACT,UAAU,AACV,eAAgB,CAKjB,AAdH,uBAYM,oBAAqB,CACtB,AAIL,OACE,aAAa,AACb,aAAa,AACb,gBAAgB,AAChB,cAAc,AACd,kBAAkB,AAClB,mBAAmB,AACnB,sBAAuB,CAaxB,AApBD,cAUI,oBExEmC,AFyEnC,eAAgB,CACjB,AAZH,iBAeI,gBC7DW,AD8DX,eE9EmC,AF+EnC,wFArF6J,AAsF7J,eAAgB,CACjB,AAGH,cACE,gBAAiB,CAClB,AAED,SACE,UAAU,AACV,oBAAqB,CA8BtB,AA5BC,oBACE,eAAe,AACf,yBAAyB,AACzB,gBC/EW,ADgFX,kBEhGmC,CFiGpC,AAED,cACE,eAAkB,CAWnB,AAZD,8BAKM,cAAe,CAChB,AANL,+BASM,eAAgB,CACjB,AAIL,sBACE,oBAAqB,CACtB,AAED,0BACE,eChGa,CDiGd,AAGH,SACE,aAAc,CACf,AAED,oBACE,gBAAiB,CAClB,AAED,cACE,mBAAmB,AACnB,cGxF0G,AHyF1G,cErIqC,CF0ItC,AAHC,oBACE,wBAAyB,CAC1B,AAGH,OACE,QAAS,CAkBV,AAnBD,WIzHE,+DAZ8E,AJ2I5E,eAAe,AACf,8BAAiC,CAKlC,AAZH,iBIzHE,8DAT8E,CJ6I3E,AAXL,kBAeI,kBAAkB,AAClB,oBE5JmC,AF6JnC,aGjHwG,CHkHzG,AAGH,eACE,oBAAoB,AACpB,mBAAoB,AACpB,gBAAgB,AAChB,yBGzH0G,AH0H1G,cG1H0G,AH2H1G,qBAAqB,AACrB,yBAAyB,AACzB,gBCnJe,ADoJf,sBAAwB,AACxB,kBAAkB,AAClB,uBAAuB,AACvB,kBAAmB,CAWpB,AAvBD,qBAeI,qBGpIwG,AHqIxG,aGrIwG,CHsIzG,AAjBH,0BAoBI,qBErLmC,AFsLnC,aAAc,CACf,AAGH,OACE,yFAA0G,AAC1G,0BAA0B,AAC1B,aGjJ0G,CHkJ3G,AAED,iBACE,aAAa,AACb,gBAAgB,AAChB,uBAAuB,AACvB,kBAAmB,CAMpB,AAVD,2DAQI,aAAe,CAChB,AK+VC,yBL3VF,QACE,oBAAqB,CACtB,CAAA","file":"folio.min.css","sourcesContent":[null,"@import '../../node_modules/rocketbelt/dist/tools/tools';\n\n$system-font-stack: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n\nbody {\n  font-family: $system-font-stack;\n}\n\nh1, h2, h3, h4 {\n  font-weight: 600;\n  font-family: 'Work Sans';\n}\n\nh2 {\n  font-weight: font-weight(normal);\n  font-size: font-size(7);\n}\n\n.link-social {\n  fill: color(white);\n}\n\n.link-email,\n.link-email:hover,\n.link-email:visited,\n.link-email:active {\n  color: color(white);\n  text-decoration: none;\n}\n\n.link-home,\n.link-home:visited,\n.link-home:active {\n  color: color(white);\n  text-decoration: none;\n  font-weight: font-weight(semibold);\n}\n\n.header-without-intro {\n  background: color(accent);\n  color: color(white);\n\n  .col {\n    padding: 0;\n  }\n}\n\n.header-with-intro {\n  background: radial-gradient(ellipse farthest-corner at left top, color(accent, darker) 15%, color(secondary) 100%);\n  background-size: 400% 100%;\n  color: color(white);\n}\n\n.nav-top {\n  display: flex;\n  padding: 1rem;\n  min-height: 44px;\n  align-items: center;\n\n  .nav_items {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n\n    li {\n      display: inline-block;\n    }\n  }\n}\n\n.intro {\n  display: flex;\n  padding: 1rem;\n  min-height: 60vh;\n  max-width: 66%;\n  align-self: center;\n  align-items: center;\n  justify-content: center;\n\n  .title {\n    font-size: font-size(7);\n    line-height: 1.2;\n  }\n\n  .subtitle {\n    font-weight: font-weight(normal);\n    font-size: font-size(0);\n    font-family: $system-font-stack;\n    line-height: 1.5;\n  }\n}\n\n.main-content {\n  margin: 5rem auto;\n}\n\n.process {\n  padding: 0;\n  list-style-type: none;\n\n  &_step_title {\n    display: inline;\n    text-transform: uppercase;\n    font-weight: font-weight(normal);\n    font-size: font-size(1);\n  }\n\n  &_step {\n    margin: 0 0 1rem 0;\n\n    p {\n      &:nth-of-type(1) {\n        display: inline;\n      }\n\n      &:nth-of-type(2) {\n        margin-top: 1rem;\n      }\n    }\n  }\n\n  &_step_methods {\n    list-style-type: disc;\n  }\n\n  &_step_method-name {\n    font-weight: font-weight(semibold);\n  }\n}\n\n.project {\n  margin: 3rem 0;\n}\n\n.project_case-study {\n  margin: 2rem 1rem;\n}\n\n.project_role {\n  margin-bottom: 1rem;\n  color: color(gray, minus1);\n  font-size: font-size(0);\n\n  &_title {\n    text-transform: uppercase;\n  }\n}\n\nfigure {\n  margin: 0;\n\n  img {\n    @include z-depth(1);\n\n    max-width: 100%;\n    transition: box-shadow 200ms ease;\n\n    &:hover {\n      @include z-depth(2);\n    }\n  }\n\n  figcaption {\n    font-style: italic;\n    font-size: font-size(-2);\n    color: color(gray);\n  }\n}\n\na[role='button'] {\n  display: inline-flex;\n  padding: 0.5rem 1rem;\n  min-height: 44px;\n  border: 2px solid color(accent);\n  color: color(accent);\n  text-decoration: none;\n  text-transform: uppercase;\n  font-weight: font-weight(semibold);\n  font-family: 'Work Sans';\n  align-self: center;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    border-color: color(accent, lighter);\n    color: color(accent, lighter);\n  }\n\n  .cta_arrow {\n    font-size: font-size(2);\n    line-height: 1;\n  }\n}\n\nfooter {\n  background: radial-gradient(ellipse farthest-corner at right top, color(secondary) 10%, color(accent) 80%);\n  background-size: 200% 100%;\n  color: color(white);\n}\n\n.footer-contents {\n  display: flex;\n  min-height: 20vh;\n  justify-content: center;\n  align-items: center;\n\n  .link-email,\n  .link-social {\n    padding: 0.5rem;\n  }\n}\n\n@include media('>=sm') {\n  .button {\n    display: inline-block;\n  }\n}\n","/// Return a bulletproof font-weight. Give it a string (or your best guess) and\n/// it returns the correct weight value.\n///\n/// @group Typography\n/// @author Kendrick Arnett\n///\n/// @param $style - The weight to return\n///\n/// @example scss - font-weight function\n///   font-weight(thin);\n///   // 100;\n///   font-weight(semibold);\n///   // 600;\n///   font-weight(semi-bold);\n///   // 600;\n@function font-weight($style: normal) {\n  $style: to_lower_case($style);\n  $weights: (\n    thin: 100,\n    ultralight: 100,\n    ultra-light: 100,\n    extralight: 200,\n    extra-light: 200,\n    light: 300,\n    normal: 400,\n    book: 400,\n    medium: 500,\n    demi: 600,\n    demibold: 600,\n    demi-bold: 600,\n    semibold: 600,\n    semi-bold: 600,\n    bold: 700,\n    extrabold: 800,\n    extra-bold: 800,\n    black: 900,\n    heavy: 900,\n    ultrabold: 900,\n    ultra-bold: 900\n  );\n\n  @return if(map-has-key($weights, $style),\n            map-get($weights, $style),\n            map-get($weights, normal));\n}\n","@function ms-calc($Value, $Base: $ms-base, $Ratio: $ms-ratio) {\n  \n  // If pow exists use it.\n  // It supports non-interger values!\n  @if $MS-pow-exists {\n\n    // The formula for figuring out modular scales is:\n    // (r^v)*b\n    @return pow($Ratio, $Value) * $Base;\n  }\n\n  // If not, use ms-pow().\n  // Not as fast or capable of non-integer exponents.\n  @else {\n    @return ms-pow($Ratio, $Value) * $Base;\n  }\n}","$brand-blue: #0a689d;\n$gray: mix(#a11622, #7a7a7a, 5%);\n$primary: mix(scale-color($brand-blue, $lightness: 20%), gray, 95%);\n\n$base-families: (\n  brand: $brand-blue,\n  sale: #a21f35,\n  primary: $primary,\n  secondary: adjust-hue($primary, -30),\n  accent: adjust-hue($primary, 60),\n  gray: $gray,\n  success: #00b575,\n  warning: #ffc300,\n  error: #d51c31,\n  info: $brand-blue,\n  black: mix(#a11622, #000, 2%),\n  white: mix(#a11622, #fff, 1%)\n);\n\n$base-variants: (\n  base: 0,\n  lighter: 0.4,\n  lightest: 0.8,\n  darker: -0.2,\n  darkest: -0.5\n);\n\n$gray-variants: (\n  base: 0,\n  plus1: 0.2,\n  plus2: 0.4,\n  plus3: 0.6,\n  plus4: 0.8,\n  plus5: 0.9,\n  minus1: -0.2,\n  minus2: -0.4,\n);\n\n$black-white-variants: (base: 0);\n\n@function build-families() {\n  $families: ();\n\n  @each $family, $color in $base-families {\n    $variants: ();\n\n    $v: if($family == gray, $gray-variants,\n          if($family == black or $family == white, $black-white-variants,\n          $base-variants)\n        );\n\n    @each $variant, $percentage in $v {\n      $variants: map-merge($variants, (#{$variant}: scale-color($color, $lightness: percentage($percentage))));\n    }\n\n    $families: map-merge($families, (#{$family}: $variants));\n  }\n\n  @return $families;\n}\n\n$color-families: build-families();\n","/// Adds visual depth with a box shadow and manages a corresponding `z-index`.\n///\n/// @author Kendrick Arnett\n///\n/// @see {mixin} button-shadow\n///\n/// @param $depth [0] - The depth of shadow to render.\n@mixin z-depth($depth: 0) {\n  $box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15),  0 0 2px rgba(0, 0, 0, 0.09);\n  @if ($depth == off) {\n    $box-shadow: none;\n    $z-index: 0;\n  } @else {\n    $z-index: $depth;\n    @if ($depth == 1) {\n      $box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12),  0 1px 2px rgba(0, 0, 0, 0.24);\n    }\n    @else if ($depth == 2) {\n      $box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15),  0 2px 6px rgba(0, 0, 0, 0.23);\n    }\n    @else if ($depth == 3) {\n      $box-shadow: 0 4px 8px rgba(0, 0, 0, 0.17),  0 3px 10px rgba(0, 0, 0, 0.15);\n    }\n    @else if ($depth == 4) {\n      $box-shadow: 0 8px 14px rgba(0, 0, 0, 0.19),  0 5px 12px rgba(0, 0, 0, 0.1);\n    }\n  }\n  box-shadow: $box-shadow;\n}\n","@charset 'UTF-8';\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.4\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if log(..) {}` instead.\n  $_: log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if log(..) {}` instead.\n    $_: log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"]}